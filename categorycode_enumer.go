// Code generated by "enumer -json -text -yaml -type=CategoryCode"; DO NOT EDIT.

//
package visca

import (
	"encoding/json"
	"fmt"
)

const (
	_CategoryCodeName_0 = "CatInvalidCatInterface"
	_CategoryCodeName_1 = "CatCamera1CatCamera2CatPanTilter"
	_CategoryCodeName_2 = "CatDisplay"
)

var (
	_CategoryCodeIndex_0 = [...]uint8{0, 10, 22}
	_CategoryCodeIndex_1 = [...]uint8{0, 10, 20, 32}
	_CategoryCodeIndex_2 = [...]uint8{0, 10}
)

func (i CategoryCode) String() string {
	switch {
	case -1 <= i && i <= 0:
		i -= -1
		return _CategoryCodeName_0[_CategoryCodeIndex_0[i]:_CategoryCodeIndex_0[i+1]]
	case 4 <= i && i <= 6:
		i -= 4
		return _CategoryCodeName_1[_CategoryCodeIndex_1[i]:_CategoryCodeIndex_1[i+1]]
	case i == 126:
		return _CategoryCodeName_2
	default:
		return fmt.Sprintf("CategoryCode(%d)", i)
	}
}

var _CategoryCodeValues = []CategoryCode{-1, 0, 4, 5, 6, 126}

var _CategoryCodeNameToValueMap = map[string]CategoryCode{
	_CategoryCodeName_0[0:10]:  -1,
	_CategoryCodeName_0[10:22]: 0,
	_CategoryCodeName_1[0:10]:  4,
	_CategoryCodeName_1[10:20]: 5,
	_CategoryCodeName_1[20:32]: 6,
	_CategoryCodeName_2[0:10]:  126,
}

// CategoryCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CategoryCodeString(s string) (CategoryCode, error) {
	if val, ok := _CategoryCodeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CategoryCode values", s)
}

// CategoryCodeValues returns all values of the enum
func CategoryCodeValues() []CategoryCode {
	return _CategoryCodeValues
}

// IsACategoryCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CategoryCode) IsACategoryCode() bool {
	for _, v := range _CategoryCodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CategoryCode
func (i CategoryCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CategoryCode
func (i *CategoryCode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CategoryCode should be a string, got %s", data)
	}

	var err error
	*i, err = CategoryCodeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CategoryCode
func (i CategoryCode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CategoryCode
func (i *CategoryCode) UnmarshalText(text []byte) error {
	var err error
	*i, err = CategoryCodeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CategoryCode
func (i CategoryCode) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CategoryCode
func (i *CategoryCode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CategoryCodeString(s)
	return err
}
