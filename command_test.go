package visca

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestHeaderToByteWorks(t *testing.T) {
	h := Header{
		From: 0,
		To:   1,
	}
	assert.Equal(t, byte(0x81), h.ToByte(), "it outputs the expected byte")
}

func TestCommandToBytesWorks(t *testing.T) {
	cmd := NewCommand(0, 1)
	assert.Equal(t, []byte{0x81}, cmd.ToBytes(), "it outputs the expected byte sequence")
}

func TestParseInt(t *testing.T) {
	var tests = []struct {
		want int64
		have []byte
	}{
		{-1296, []byte{0x0F, 0x0A, 0x0F, 0x00}},
		{-1296, []byte{0x0F, 0x0A, 0x0F, 0x00}},
	}

	for _, tt := range tests {
		d, err := parseIntFromNibbles(tt.have)
		assert.Nil(t, err, "should have no error")
		assert.Equal(t, tt.want, d)
	}
}

func TestDecodePosition(t *testing.T) {
	var tests = []struct {
		want float64
		have []byte
	}{
		{-170, []byte{0x0F, 0x06, 0x07, 0x00}},
		{-135, []byte{0x0F, 0x08, 0x06, 0x08}},
		{-90, []byte{0x0F, 0x0A, 0x0F, 0x00}},
		{-45, []byte{0x0F, 0x0D, 0x07, 0x08}},
		{-30, []byte{0x0F, 0x0E, 0x05, 0x00}},
		{0, []byte{0x00, 0x00, 0x00, 0x00}},
		{30, []byte{0x00, 0x01, 0x0B, 0x00}},
		{45, []byte{0x00, 0x02, 0x08, 0x08}},
		{90, []byte{0x00, 0x05, 0x01, 0x00}},
		{135, []byte{0x00, 0x07, 0x09, 0x08}},
		{170, []byte{0x00, 0x09, 0x09, 0x00}},

		{-4.305555555555555, []byte{0x0F, 0x0F, 0x0C, 0x02}},
		{1.1111111111111112, []byte{0x00, 0x00, 0x01, 0x00}},

		{-170, []byte{0x0F, 0x06, 0x03, 0x05, 0x09}},
	}

	for _, tt := range tests {
		d, err := decodePosition(tt.have)
		assert.Nil(t, err, "should have no error")
		assert.Equal(t, tt.want, d)
	}
}

func TestDecodeTilt(t *testing.T) {
	var tests = []struct {
		want float64
		have []byte
	}{
		{-30, []byte{0x0E, 0x04, 0x05, 0x0B}},
		{-20, []byte{0x0E, 0x0D, 0x09, 0x02}},
		{-10, []byte{0x0F, 0x06, 0x0C, 0x09}},
		{0, []byte{0x00, 0x00, 0x00, 0x00}},
		{10, []byte{0x00, 0x09, 0x03, 0x07}},
		{20, []byte{0x01, 0x02, 0x06, 0x0E}},
		{30, []byte{0x01, 0x0B, 0x0A, 0x05}},
		{40, []byte{0x02, 0x04, 0x0D, 0x0C}},
		{50, []byte{0x02, 0x0E, 0x01, 0x03}},
		{60, []byte{0x03, 0x07, 0x04, 0x0A}},
		{70, []byte{0x04, 0x00, 0x08, 0x01}},
		{80, []byte{0x04, 0x09, 0x0B, 0x08}},
		{90, []byte{0x05, 0x02, 0x0E, 0x0F}},
	}

	for _, tt := range tests {
		d, err := decodeTilt(tt.have)
		assert.Nil(t, err, "should have no error")
		assert.Equal(t, tt.want, d)
	}
}

// func TestDecodeZoom(t *testing.T) {
// 	var tests = []struct {
// 		want float64
// 		have []byte
// 	}{
// 		{1, []byte{0x00, 0x00, 0x00, 0x00}},  // 0
// 		{2, []byte{0x01, 0x08, 0x00, 0x00}},  // 6144
// 		{3, []byte{0x02, 0x03, 0x04, 0x00}},  // 9024
// 		{4, []byte{0x02, 0x0A, 0x04, 0x00}},  // 10816
// 		{5, []byte{0x02, 0x0F, 0x00, 0x00}},  // 12032
// 		{6, []byte{0x03, 0x03, 0x00, 0x00}},  // 13056
// 		{7, []byte{0x03, 0x06, 0x00, 0x00}},  // 13824
// 		{8, []byte{0x03, 0x08, 0x08, 0x00}},  // 14464
// 		{9, []byte{0x03, 0x0A, 0x0C, 0x00}},  // 15040
// 		{10, []byte{0x03, 0x0C, 0x0C, 0x00}}, // 15552
// 		{11, []byte{0x03, 0x0E, 0x08, 0x00}}, // 16000
// 		{12, []byte{0x04, 0x00, 0x00, 0x00}}, // 16384
// 	}

// 	for _, tt := range tests {
// 		d, err := decodeZoom(tt.have)
// 		assert.Nil(t, err, "should have no error")
// 		assert.Equal(t, tt.want, d)
// 	}
// }
