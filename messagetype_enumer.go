// Code generated by "enumer -json -text -yaml -type=MessageType"; DO NOT EDIT.

//
package visca

import (
	"encoding/json"
	"fmt"
)

const _MessageTypeName = "MsgInvalidMsgCommandMsgInquiryMsgCancelMsgNetworkChangeMsgACKMsgCompletionMsgError"

var _MessageTypeIndex = [...]uint8{0, 10, 20, 30, 39, 55, 61, 74, 82}

func (i MessageType) String() string {
	if i < 0 || i >= MessageType(len(_MessageTypeIndex)-1) {
		return fmt.Sprintf("MessageType(%d)", i)
	}
	return _MessageTypeName[_MessageTypeIndex[i]:_MessageTypeIndex[i+1]]
}

var _MessageTypeValues = []MessageType{0, 1, 2, 3, 4, 5, 6, 7}

var _MessageTypeNameToValueMap = map[string]MessageType{
	_MessageTypeName[0:10]:  0,
	_MessageTypeName[10:20]: 1,
	_MessageTypeName[20:30]: 2,
	_MessageTypeName[30:39]: 3,
	_MessageTypeName[39:55]: 4,
	_MessageTypeName[55:61]: 5,
	_MessageTypeName[61:74]: 6,
	_MessageTypeName[74:82]: 7,
}

// MessageTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MessageTypeString(s string) (MessageType, error) {
	if val, ok := _MessageTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MessageType values", s)
}

// MessageTypeValues returns all values of the enum
func MessageTypeValues() []MessageType {
	return _MessageTypeValues
}

// IsAMessageType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MessageType) IsAMessageType() bool {
	for _, v := range _MessageTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MessageType
func (i MessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MessageType
func (i *MessageType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MessageType should be a string, got %s", data)
	}

	var err error
	*i, err = MessageTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for MessageType
func (i MessageType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MessageType
func (i *MessageType) UnmarshalText(text []byte) error {
	var err error
	*i, err = MessageTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for MessageType
func (i MessageType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for MessageType
func (i *MessageType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = MessageTypeString(s)
	return err
}
